// Fishers of Men (FOM) Ministry Platform Database Schema with NextAuth Integration
// Comprehensive digital ministry solution with robust authentication, certificate management, and social features

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS FOR TYPE SAFETY AND CONSISTENCY
// ========================================

enum UserRole {
  VISITOR // Can view public content only
  MEMBER // Basic authenticated user
  MINISTRY_LEADER // Can manage ministry content and events
  ADMIN // Can manage users and advanced features
  SUPER_ADMIN // Full system access

  @@map("user_role")
}

enum DisplayNamePreference {
  USERNAME
  FULL_NAME
  FIRST_NAME

  @@map("display_name_preference")
}

enum ProfileVisibility {
  PUBLIC
  MEMBERS_ONLY
  PRIVATE

  @@map("profile_visibility")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED

  @@map("post_status")
}

enum PostCategory {
  SERMON
  DEVOTIONAL
  BIBLICAL_STUDY
  TESTIMONY
  MISSION_REPORT
  ANNOUNCEMENT

  @@map("post_category")
}

enum EventType {
  SERVICE
  BIBLE_STUDY
  MISSION_TRIP
  CONFERENCE
  RETREAT
  FELLOWSHIP
  OUTREACH

  @@map("event_type")
}

enum PrayerCategory {
  PERSONAL
  FAMILY
  MINISTRY
  WORLD
  HEALING
  SALVATION

  @@map("prayer_category")
}

enum PrayerUrgency {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@map("prayer_urgency")
}

enum ReactionType {
  LIKE
  LOVE
  PRAY
  AMEN
  FIRE
  SMILE
  SAD
  HEART

  @@map("reaction_type")
}

// ========================================
// NEXTAUTH.JS AUTHENTICATION MODELS
// ========================================

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ========================================
// ENHANCED USER MANAGEMENT
// ========================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")

  // Enhanced name fields following FOM requirements
  firstName String  @map("first_name") @db.VarChar(50)
  lastName  String  @map("last_name") @db.VarChar(50)
  username  String? @unique @db.VarChar(30)

  // Profile settings with FOM-specific preferences
  displayNamePreference DisplayNamePreference @default(FULL_NAME) @map("display_name_preference")
  profileVisibility     ProfileVisibility     @default(MEMBERS_ONLY) @map("profile_visibility")

  // Authentication & Role-based access control
  role     UserRole @default(MEMBER)
  password String? // For email/password authentication (hashed with bcrypt)

  // Ministry-specific profile data
  avatarUrl                 String? @map("avatar_url") @db.VarChar(500)
  ministryInterests         Json?   @map("ministry_interests") // Array of ministry interests
  certificateSharingEnabled Boolean @default(true) @map("certificate_sharing_enabled")

  // Timestamps
  joinedDate DateTime @default(now()) @map("joined_date")
  lastActive DateTime @default(now()) @map("last_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // NextAuth Relations
  accounts Account[]
  sessions Session[]

  // FOM Platform Relations (to be implemented in future phases)
  posts                Post[]
  sermons              Sermon[]
  donations            Donation[]
  partnerships         Partnership[]
  prayerRequests       PrayerRequest[]
  eventRegistrations   EventRegistration[]
  certificatesIssued   Certificate[]         @relation("CertificateIssuer")
  certificatesReceived Certificate[]         @relation("CertificateRecipient")
  friendsRequested     Friendship[]          @relation("FriendRequester")
  friendsAddressed     Friendship[]          @relation("FriendAddressee")
  conversationsCreated Conversation[]        @relation("ConversationCreator")
  messages             Message[]
  reactions            Reaction[]
  comments             Comment[]
  analyticsEvents      AnalyticsEvent[]
  reportsGenerated     Report[]
  createdEvents        Event[]
  mediaUploads         Media[]
  templateCreations    CertificateTemplate[]
  missionTripsLed      MissionTrip[]

  // Card Relations
  cardTemplatesCreated CardTemplate[] @relation("CardTemplateCreator")
  cardsCreated         Card[]         @relation("CardCreator")

  @@map("users")
}

// ========================================
// CONTENT MANAGEMENT & BLOG SYSTEM
// ========================================

model Post {
  id                  String       @id @default(cuid())
  authorId            String       @map("author_id")
  title               String       @db.VarChar(255)
  slug                String       @unique @db.VarChar(255)
  content             String       @db.LongText
  excerpt             String?      @db.Text
  category            PostCategory
  status              PostStatus   @default(DRAFT)
  featuredImage       String?      @map("featured_image")
  scriptureReferences Json?        @map("scripture_references") // Array of Bible references
  tags                Json? // Array of tags
  viewsCount          Int          @default(0) @map("views_count")

  publishedAt DateTime? @map("published_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relationships
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions Reaction[] @relation("PostReactions")
  comments  Comment[]  @relation("PostComments")

  @@map("posts")
}

model Media {
  id           String   @id @default(cuid())
  filename     String   @db.VarChar(255)
  originalName String   @map("original_name") @db.VarChar(255)
  mimeType     String   @map("mime_type") @db.VarChar(100)
  fileSize     Int      @map("file_size")
  filePath     String   @map("file_path") @db.VarChar(500)
  altText      String?  @map("alt_text") @db.VarChar(255)
  caption      String?  @db.Text
  uploadedBy   String   @map("uploaded_by")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relationships
  uploader User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("media")
}

model Sermon {
  id                 String   @id @default(cuid())
  title              String   @db.VarChar(255)
  speaker            String   @db.VarChar(100)
  seriesName         String?  @map("series_name") @db.VarChar(255)
  scriptureReference String?  @map("scripture_reference") @db.VarChar(255)
  audioUrl           String?  @map("audio_url") @db.VarChar(500)
  videoUrl           String?  @map("video_url") @db.VarChar(500)
  transcript         String?  @db.LongText
  duration           Int? // Duration in seconds
  datePreached       DateTime @map("date_preached")
  tags               Json? // Array of tags
  downloadsCount     Int      @default(0) @map("downloads_count")
  viewsCount         Int      @default(0) @map("views_count")
  createdBy          String   @map("created_by")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relationships
  creator   User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  reactions Reaction[] @relation("SermonReactions")
  comments  Comment[]  @relation("SermonComments")

  @@map("sermons")
}

// ========================================
// PARTNERSHIP & DONATION SYSTEM
// ========================================

model Donation {
  id            String    @id @default(cuid())
  donorId       String    @map("donor_id")
  amount        Decimal   @db.Decimal(10, 2)
  currency      String    @default("USD") @db.VarChar(3)
  frequency     String // "one_time" | "monthly" | "quarterly" | "annual"
  designation   String?   @db.VarChar(255) // What the donation is for
  paymentMethod String    @map("payment_method") @db.VarChar(50)
  transactionId String    @unique @map("transaction_id") @db.VarChar(255)
  status        String    @default("pending") // "pending" | "completed" | "failed" | "refunded"
  receiptSentAt DateTime? @map("receipt_sent_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relationships
  donor User @relation(fields: [donorId], references: [id], onDelete: Cascade)

  @@map("donations")
}

model Partnership {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String // "prayer" | "financial" | "mission"
  monthlyCommitment Decimal? @map("monthly_commitment") @db.Decimal(10, 2)
  startDate         DateTime @map("start_date")
  status            String   @default("active") // "active" | "paused" | "ended"
  specialRequests   String?  @map("special_requests") @db.Text
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relationships
  partner User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("partnerships")
}

model Project {
  id             String    @id @default(cuid())
  title          String    @db.VarChar(255)
  description    String    @db.Text
  fundingGoal    Decimal   @map("funding_goal") @db.Decimal(12, 2)
  currentFunding Decimal   @default(0) @map("current_funding") @db.Decimal(12, 2)
  startDate      DateTime  @map("start_date")
  endDate        DateTime? @map("end_date")
  status         String    @default("active") // "active" | "completed" | "cancelled"
  featuredImage  String?   @map("featured_image") @db.VarChar(500)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  @@map("projects")
}

// ========================================
// EVENTS & MISSION MANAGEMENT
// ========================================

model Event {
  id                   String    @id @default(cuid())
  title                String    @db.VarChar(255)
  description          String    @db.Text
  eventType            EventType @map("event_type")
  startDate            DateTime  @map("start_date")
  endDate              DateTime? @map("end_date")
  location             String?   @db.VarChar(255)
  registrationRequired Boolean   @default(false) @map("registration_required")
  maxParticipants      Int?      @map("max_participants")
  registrationDeadline DateTime? @map("registration_deadline")
  cost                 Decimal?  @db.Decimal(10, 2)
  featuredImage        String?   @map("featured_image") @db.VarChar(500)
  createdBy            String    @map("created_by")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relationships
  creator       User                @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  registrations EventRegistration[]
  reactions     Reaction[]          @relation("EventReactions")
  comments      Comment[]           @relation("EventComments")

  @@map("events")
}

model EventRegistration {
  id               String   @id @default(cuid())
  eventId          String   @map("event_id")
  userId           String   @map("user_id")
  registrationDate DateTime @default(now()) @map("registration_date")
  paymentStatus    String   @default("pending") @map("payment_status") // "pending" | "paid" | "cancelled"
  specialRequests  String?  @map("special_requests") @db.Text

  // Relationships
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_registrations")
}

model MissionTrip {
  id            String   @id @default(cuid())
  destination   String   @db.VarChar(255)
  purpose       String   @db.Text
  teamLeader    String   @map("team_leader")
  departureDate DateTime @map("departure_date")
  returnDate    DateTime @map("return_date")
  cost          Decimal? @db.Decimal(10, 2)
  maxTeamSize   Int      @map("max_team_size")
  requirements  String?  @db.Text
  packingList   Json?    @map("packing_list") // Array of items
  updates       Json? // Array of mission updates
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relationships
  leader User @relation(fields: [teamLeader], references: [id], onDelete: Cascade)

  @@map("mission_trips")
}

// ========================================
// SOCIAL FEATURES & COMMUNITY
// ========================================

model Friendship {
  id          String   @id @default(cuid())
  requesterId String   @map("requester_id")
  addresseeId String   @map("addressee_id")
  status      String   @default("pending") // "pending" | "accepted" | "blocked"
  createdAt   DateTime @default(now()) @map("created_at")

  // Relationships
  requester User @relation("FriendRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee User @relation("FriendAddressee", fields: [addresseeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, addresseeId])
  @@map("friendships")
}

model Conversation {
  id            String   @id @default(cuid())
  type          String // "direct" | "group"
  name          String?  @db.VarChar(255) // For group chats
  creatorId     String   @map("creator_id")
  lastMessageAt DateTime @default(now()) @map("last_message_at")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relationships
  creator  User      @relation("ConversationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String   @map("conversation_id")
  senderId       String   @map("sender_id")
  content        String   @db.Text
  messageType    String   @default("text") @map("message_type") // "text" | "media" | "prayer"
  createdAt      DateTime @default(now()) @map("created_at")

  // Relationships
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Reaction {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  targetType String   @map("target_type") // "post" | "prayer" | "comment" | "sermon" | "event"
  targetId   String   @map("target_id")
  emoji      String // "like" | "love" | "pray" | "amen" | "fire" | "smile" | "sad"
  createdAt  DateTime @default(now()) @map("created_at")

  // Relationships with proper relation names to avoid conflicts
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post?          @relation("PostReactions", fields: [targetId], references: [id], onDelete: Cascade, map: "reactions_post_fkey")
  sermon        Sermon?        @relation("SermonReactions", fields: [targetId], references: [id], onDelete: Cascade, map: "reactions_sermon_fkey")
  event         Event?         @relation("EventReactions", fields: [targetId], references: [id], onDelete: Cascade, map: "reactions_event_fkey")
  prayerRequest PrayerRequest? @relation("PrayerReactions", fields: [targetId], references: [id], onDelete: Cascade, map: "reactions_prayer_fkey")
  comment       Comment?       @relation("CommentReactions", fields: [targetId], references: [id], onDelete: Cascade, map: "reactions_comment_fkey")

  @@unique([userId, targetType, targetId, emoji])
  @@map("reactions")
}

model PrayerRequest {
  id                  String         @id @default(cuid())
  requesterId         String         @map("requester_id")
  title               String         @db.VarChar(255)
  description         String         @db.Text
  category            PrayerCategory
  urgency             PrayerUrgency  @default(MEDIUM)
  anonymous           Boolean        @default(false)
  status              String         @default("active") // "active" | "answered" | "closed"
  answeredDescription String?        @map("answered_description") @db.Text
  reactionCount       Json?          @map("reaction_count") // Count of different reactions
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")

  // Relationships
  requester User       @relation(fields: [requesterId], references: [id], onDelete: Cascade)
  reactions Reaction[] @relation("PrayerReactions")
  comments  Comment[]  @relation("PrayerComments")

  @@map("prayer_requests")
}

model Comment {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  targetType    String   @map("target_type") // "post" | "prayer" | "event" | "sermon"
  targetId      String   @map("target_id")
  content       String   @db.Text
  parentId      String?  @map("parent_id") // For nested comments
  reactionCount Json?    @map("reaction_count") // Count of different reactions
  createdAt     DateTime @default(now()) @map("created_at")

  // Relationships
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent        Comment?       @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[]      @relation("CommentReplies")
  reactions     Reaction[]     @relation("CommentReactions")
  post          Post?          @relation("PostComments", fields: [targetId], references: [id], onDelete: Cascade, map: "comments_post_fkey")
  sermon        Sermon?        @relation("SermonComments", fields: [targetId], references: [id], onDelete: Cascade, map: "comments_sermon_fkey")
  event         Event?         @relation("EventComments", fields: [targetId], references: [id], onDelete: Cascade, map: "comments_event_fkey")
  prayerRequest PrayerRequest? @relation("PrayerComments", fields: [targetId], references: [id], onDelete: Cascade, map: "comments_prayer_fkey")

  @@map("comments")
}

// ========================================
// CERTIFICATE MANAGEMENT SYSTEM
// ========================================

model CertificateTemplate {
  id           String @id @default(cuid())
  name         String @db.VarChar(255)
  description  String @db.Text
  category     String @db.VarChar(100) // "baptism" | "confirmation" | "course" | "training" | "volunteer" | "mission" | "appreciation" | "excellence" | "leadership"
  typeCode     String @map("type_code") @db.VarChar(3) // APP, EXC, LED, etc.
  templateData Json   @map("template_data") // Stores design layout, fonts, positions, fields

  // Security settings
  defaultSecurityLevel String  @default("STANDARD") @map("default_security_level") // "BASIC" | "STANDARD" | "HIGH"
  requiresApproval     Boolean @default(false) @map("requires_approval")

  // Organization support
  organizationId String? @map("organization_id") @db.VarChar(50) // null = available to all orgs

  // Status
  isActive  Boolean  @default(true) @map("is_active")
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  creator      User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  certificates Certificate[]

  @@map("certificate_templates")
}

model Certificate {
  id         String @id @default(cuid())
  templateId String @map("template_id")

  // Enhanced recipient information with separate name fields
  recipientFirstName String  @map("recipient_first_name") @db.VarChar(50)
  recipientLastName  String  @map("recipient_last_name") @db.VarChar(50)
  recipientEmail     String  @map("recipient_email") @db.VarChar(255)
  issuedTo           String? @map("issued_to") // User ID if recipient is registered user

  // Certificate metadata
  issuedBy        String @map("issued_by")
  verificationId  String @unique @map("verification_id") @db.VarChar(50)
  certificateData Json   @map("certificate_data") // Stores personalized content

  // Security features
  securityLevel    String  @default("BASIC") @map("security_level") // "BASIC" | "STANDARD" | "HIGH"
  digitalSignature String? @map("digital_signature") @db.VarChar(255)
  blockchainHash   String? @map("blockchain_hash") @db.VarChar(255)
  watermarkData    Json?   @map("watermark_data") // Stores watermark configuration
  securityMetadata Json?   @map("security_metadata") // Additional security data

  // Organization support
  organizationId String @default("fom") @map("organization_id") @db.VarChar(50)

  // File storage (EKD Digital Assets integration)
  pdfPath    String @map("pdf_path") @db.VarChar(500)
  pngPath    String @map("png_path") @db.VarChar(500)
  qrCodeData String @map("qr_code_data") @db.VarChar(500)

  // Status and dates
  issueDate  DateTime  @default(now()) @map("issue_date")
  expiryDate DateTime? @map("expiry_date")
  status     String    @default("active") // "active" | "revoked" | "expired"
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relationships
  template      CertificateTemplate       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  issuer        User                      @relation("CertificateIssuer", fields: [issuedBy], references: [id], onDelete: Cascade)
  recipient     User?                     @relation("CertificateRecipient", fields: [issuedTo], references: [id], onDelete: SetNull)
  verifications CertificateVerification[]

  @@map("certificates")
}

model CertificateVerification {
  id                 String   @id @default(cuid())
  certificateId      String   @map("certificate_id")
  verifiedByIp       String   @map("verified_by_ip") @db.VarChar(45)
  verifiedAt         DateTime @default(now()) @map("verified_at")
  verificationMethod String   @map("verification_method") // "qr_code" | "manual" | "api"

  // Relationships
  certificate Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)

  @@map("certificate_verifications")
}

// ========================================
// ANALYTICS & ADMINISTRATION
// ========================================

model AnalyticsEvent {
  id        String   @id @default(cuid())
  eventType String   @map("event_type") @db.VarChar(100)
  userId    String?  @map("user_id")
  metadata  Json? // Additional event data
  ipAddress String   @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.VarChar(500)
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("analytics_events")
}

model Report {
  id          String   @id @default(cuid())
  reportType  String   @map("report_type") @db.VarChar(100)
  parameters  Json? // Report configuration
  generatedBy String   @map("generated_by")
  filePath    String?  @map("file_path") @db.VarChar(500)
  status      String   @default("pending") // "pending" | "completed" | "failed"
  createdAt   DateTime @default(now()) @map("created_at")

  // Relationships
  generator User @relation(fields: [generatedBy], references: [id], onDelete: Cascade)

  @@map("reports")
}

// ========================================
// JICF GRADUATION CARDS
// ========================================

enum CardCategory {
  GRADUATION
  APPRECIATION
  BLESSING
  CONGRATULATION
  INVITATION

  @@map("card_category")
}

enum CardStatus {
  DRAFT
  ACTIVE
  ARCHIVED

  @@map("card_status")
}

model CardTemplate {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(255)
  description String?      @db.Text
  category    CardCategory @default(GRADUATION)
  status      CardStatus   @default(ACTIVE)

  // Template data stored as JSON
  templateData Json // Contains elements, settings, and design configuration

  // Metadata
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Preview image
  previewUrl String? @map("preview_url") @db.VarChar(500)

  // Relationships
  creator User   @relation("CardTemplateCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  cards   Card[]

  @@map("card_templates")
}

model Card {
  id         String @id @default(cuid())
  templateId String @map("template_id")

  // Optional recipient information
  recipientName String? @map("recipient_name") @db.VarChar(255)
  customMessage String? @map("custom_message") @db.Text

  // Service outline specific fields
  serviceOutline String? @map("service_outline") @db.Text
  eventName      String? @map("event_name") @db.VarChar(255)
  eventDate      String? @map("event_date") @db.VarChar(100)
  mcName         String? @map("mc_name") @db.VarChar(255)

  // Graduates name list specific fields
  graduatesList String? @map("graduates_list") @db.Text

  // Meet Our Graduates specific fields
  meetOurGraduatesData String? @map("meet_our_graduates_data") @db.Text

  // Generated files
  pngUrl String? @map("png_url") @db.VarChar(500)
  pdfUrl String? @map("pdf_url") @db.VarChar(500)

  // Metadata
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Analytics
  downloadCount Int @default(0) @map("download_count")
  viewCount     Int @default(0) @map("view_count")

  // Relationships
  template CardTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  creator  User         @relation("CardCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("cards")
}

model Organization {
  id      String  @id @default(cuid())
  slug    String  @unique @db.VarChar(50) // URL-friendly identifier
  name    String  @db.VarChar(255)
  tagline String? @db.VarChar(255)
  logoUrl String? @map("logo_url") @db.VarChar(500)

  // Branding
  colorPrimary   String? @map("color_primary") @db.VarChar(7) // Hex color
  colorSecondary String? @map("color_secondary") @db.VarChar(7)
  colorAccent    String? @map("color_accent") @db.VarChar(7)
  colorText      String? @map("color_text") @db.VarChar(7)

  // Covenant verse
  covenantText      String? @map("covenant_text") @db.Text
  covenantReference String? @map("covenant_reference") @db.VarChar(100)

  // Leadership
  executiveDirector String? @map("executive_director") @db.VarChar(255)
  chairperson       String? @map("chairperson") @db.VarChar(255)
  secretary         String? @map("secretary") @db.VarChar(255)

  // Settings
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("organizations")
}
